datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

model User {
  id       String @id @default(cuid())
  email    String @unique
  username String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password  Password?
  notes     Note[]
  posts     Post[]
  comments  Comment[]
  postVotes PostVote[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Community {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Post[]
}

model Post {
  id          String  @id @default(cuid())
  title       String
  url         String?
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String

  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  communityId String

  comments  Comment[]
  postVotes PostVote[]
}

model Comment {
  id   String @id @default(cuid())
  body String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String

  parentId String?   @unique
  parent   Comment?  @relation("CommentTree", fields: [parentId], references: [id])
  children Comment[] @relation("CommentTree")
}

model PostVote {
  vote Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId String

  @@id([userId, postId])
}
